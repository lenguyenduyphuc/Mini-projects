// Import necessary functions from Redux Toolkit
import { createSlice } from '@reduxjs/toolkit'; 

// Create a new slice of state called 'cart' which manages the cart's state
export const CreatSlice = createSlice({
  name: 'cart', // The name of the slice of state is 'cart'
  
  initialState: {
    items: [], // Initialize the 'items' array to keep track of cart items
  },

  reducers: {
    // Reducer to handle adding an item to the cart
    addItem: (state, action) => {
      const item = action.payload; // 'action.payload' contains the item data being dispatched to the store

      // Check if the item already exists in the cart by matching its 'name' property
      const existingItem = state.items.find((i) => i.name === item.name);

      if (existingItem) {
        // If the item is already in the cart, increment its quantity
        existingItem.quantity++;
      } else {
        // If the item doesn't exist, add it to the cart with an initial quantity of 1
        state.items.push({ ...item, quantity: 1 });
      }
    },

    // Reducer to handle removing an item from the cart
    removeItem: (state, action) => {
      const item = action.payload; // 'action.payload' contains the item data to remove

      // Find the item to be removed by matching its 'name' property
      const existingItem = state.items.find((i) => i.name === item.name);

      if (existingItem) {
        // Filter out the item from the 'items' array
        state.items = state.items.filter((i) => i.name !== item.name);
      }
    },

    // Reducer to handle updating the quantity of a specific item
    updateQuantity: (state, action) => {
      const { name, quantity } = action.payload; // Destructure the 'name' and 'quantity' from 'action.payload'

      // Find the item in the cart by matching its 'name' property
      const item = state.items.find((i) => i.name === name);

      if (item) {
        // Update the quantity of the item
        item.quantity = quantity;

        // If the updated quantity is 0, remove the item from the cart
        if (item.quantity === 0) {
          state.items = state.items.filter((i) => i.name !== name);
        }
      }
    },
  },
});

// Export the actions generated by the slice, which are used to dispatch changes to the cart state
export const { addItem, removeItem, updateQuantity } = CreatSlice.actions;

// Export the reducer to be used in the store setup
export default CreatSlice.reducer;
